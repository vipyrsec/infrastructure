---
cert-manager:
  enabled: true

  installCRDs: true

  namespace: cert-manager

ingress-nginx:
  controller:
    metrics:
      enabled: true

loki:
  enabled: false

  deploymentMode: SingleBinary

  loki:
    image:
      digest: sha256:cb233dada1ac1ab09b5fee5e99a081c3f0580c37863516daa02bc927cd8cadd8  # 3.0.1

    # Disable auth, since we are in-cluster
    auth_enabled: false

    commonConfig:
      replication_factor: 1

    storage:
      type: filesystem

    schemaConfig:
      configs:
        - from: 2024-01-01
          store: tsdb
          object_store: filesystem  # NOTE!: Since we're storing on the filesystem, there's no real persistence here
          schema: v13
          index:
            prefix: loki_index_
            period: 24h

  test:
    enabled: false

  lokiCanary:
    enabled: false

  gateway:
    enabled: false

  ingress:
    enabled: true

    ingressClassName: nginx

    hosts:
      - loki.vipyrsec.com

  singleBinary:
    replicas: 1

    persistence:
      size: 10Gi

  write:
    replicas: 0

  read:
    replicas: 0

  backend:
    replicas: 0

  ruler:
    enabled: false

  memcachedExporter:
    enabled: false

  resultsCache:
    enabled: false

  chunksCache:
    enabled: false

alloy:
  enabled: false

  image:
    digest: sha256:2381097248235e37c34a727103cf9ad0e11767defdab6f37646cff09acd2dbaf  # v1.3.1

  alloy:
    configMap:
      content: |-
        logging {
        	level  = "info"
        	format = "logfmt"
        }

        discovery.kubernetes "pods" {
        	role = "pod"
        }

        discovery.relabel "pods" {
        	targets = discovery.kubernetes.pods.targets

        	rule {
        		source_labels = ["__meta_kubernetes_namespace"]
        		action        = "replace"
        		target_label  = "namespace"
        	}

        	rule {
        		source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
        		action        = "replace"
        		target_label  = "app"
        	}

        	rule {
        		source_labels = ["__meta_kubernetes_pod_name"]
        		action        = "replace"
        		target_label  = "pod"
        	}

        	rule {
        		source_labels = ["__meta_kubernetes_pod_container_name"]
        		action        = "replace"
        		target_label  = "container"
        	}
        }

        loki.source.kubernetes "pod_logs" {
        	targets    = discovery.relabel.pods.output
        	forward_to = [loki.process.pod_logs.receiver]
        }

        loki.process "pod_logs" {
        	stage.static_labels {
        		values = {
        			cluster = "o11y",
        		}
        	}

        	forward_to = [loki.write.o11y.receiver]
        }

        loki.write "o11y" {
        	endpoint {
        		url = "http://vipyrsec-loki.default.svc.cluster.local:3100/loki/api/v1/push"
        	}
        }

        prometheus.exporter.self "local" { }

        prometheus.exporter.unix "local" { }

        prometheus.exporter.cadvisor "local" { }

        prometheus.scrape "self" {
        	targets    = prometheus.exporter.self.local.targets
        	forward_to = [prometheus.relabel.tagged.receiver]
        }

        prometheus.scrape "node" {
        	targets    = prometheus.exporter.unix.local.targets
        	forward_to = [prometheus.relabel.tagged.receiver]
        }

        prometheus.scrape "cadvisor" {
        	targets    = prometheus.exporter.cadvisor.local.targets
        	forward_to = [prometheus.relabel.tagged.receiver]
        }

        prometheus.scrape "pods" {
        	targets    = discovery.relabel.pods.output
        	forward_to = [prometheus.relabel.tagged.receiver]
        }

        prometheus.relabel "tagged" {
        	rule {
        		source_labels = ["__address__"]
        		regex         = ".*"
        		replacement   = "o11y"
        		target_label  = "cluster"
        	}

        	forward_to = [prometheus.remote_write.o11y.receiver]
        }

        prometheus.remote_write "o11y" {
        	endpoint {
        		url = "http://prometheus.prometheus.svc.cluster.local:9090/api/v1/write"
        	}
        }
